# -*- coding: utf-8 -*-
"""PythonPlay.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KVvTDEk4hxgjHaW4sgQtRRxV8ljaKXcb
"""
import numpy as np
#generate random between 0,1 - paraam: dmension
x = np.random.rand()
print(x)

#test generate with several dimensions and multiply to a number.
x = list(map(int,np.random.rand(100)*10 % 7))
print(x)
print(min(x))
print(max(x))

#100 tiradas de dado
x = np.random.randint(0,6, size=100)
print(x)

#que numero salio más veces? hacemos un histoograma

x = [3.2, 4.3]
y = list(map(int,x))
print(y)

#how generate integers, for instance from 8 to 15? => puedes generar numeros de 0 a 7 con el resto de dividir rand*10 % 7 -> será u



store = np.array([0,9,0,1])
cost = np.array([82,82,73,73])
np_cols = np.column_stack((store,cost))
np_cols

np_cols[0,1]

np_cols[:,0]



a=np.random.normal(1.75,0.20,10)
b=np.random.uniform(low=10, high=20,size=10)
media=np.mean(a)
media
np_city= np.column_stack((a,b))
np_city

import matplotlib.pyplot as plt
year = [1950,1970,1990,2010]
pop = [2.519,3.692,5.263,6.972]
year = [1800,1850,1900] + year
pop = [1.0,1.262,1.650] + pop
plt.xlabel('Year')
plt.ylabel('Population')
plt.title('World Population Projections')
plt.yticks([0, 2, 4, 6, 8], ['0','2B','4B','6B','8B'])
plt.plot(year, pop)
plt.show()

cc = np.corrcoef(year,pop)
cc



plt.scatter(year,pop)

values = [0,0.6,1.4,1.6,2.2,2.5,2.6,3.2,3.5,3.9,4.2,6]
plt.hist(values, bins=3)
plt.show()

#DICTIONARIES
pop =[30.55,2.77,39.21]
countries = ["afghanistan","albania","algeria"]

world = {"afghanistan":30.55,"albania":2.77,"algeria":39.21}
world["albania"]

world

world['afghanistan']+=2
world["argentina"]=48
world

"argentina" in world

del(world["albania"])

world

#dataframe from dictionary
dict = {
    "country":["Brazil", "Russia", "India", "China", "South Africa"],
    "capital":["Brasilia", "Moscow", "New Delhi", "Beijing", "Pretoria"],
    "area":[8.516, 17.10, 3.286, 9.597, 1.221],
    "population": [200.4, 143.5, 1252, 1357, 52.98] }

dict['area'][1]

#columns labels
dict.keys
#data, column by column
dict.values

import pandas as pd
brics = pd.DataFrame(dict)
brics



brics.index = ["BR","RU","IN","CH","SA"]
brics

brics['area']

brics[['area','population']]

brics[1:4]['country']

brics.loc["BR"]

brics.loc[["BR","IN","CH"],['country','capital']]

brics.loc[:,["country",'capital']]

brics.iloc[[1]]

dict = {
    "country":["Brazil", "Russia", "India", "China", "South Africa"],
    "capital":["Brasilia", "Moscow", "New Delhi", "Beijing", "Pretoria"],
    "area":[8.516, 17.10, 3.286, 9.597, 1357.00],
    "population": [200.4, 143.5, 1252, 1357, 52.98] }

import pandas as pd
brics = pd.DataFrame(dict)
brics

brics[brics['area'] > 8]['country']

import numpy as np
brics[np.logical_and(brics["area"]>8, brics['area']<10)]

def divisible_by(n, d):
    ret=False
    if(n%d==0):
        ret=True
    return(ret)


divisible_by(10,2)

error = 50.0
while error > 1:
    error = error / 4
    print(error)

for a in brics['area']:
    print(a)

for c in "marcela":
    print(c.capitalize())

#loop dictionary
world = {"afghanistan":30.55,"albania":2.77,"algeria":39.21}

for key, value in world.items():
    print(key + "--" + str(value))

import numpy as np
np_height = np.array([1.73, 1.68, 1.71, 1.89, 1.79])
np_weight = np.array([65.4, 59.2, 63.6, 88.4, 68.7])
meas = np.array([np_height, np_weight])
for val in meas:
    print(val)

for val in np.nditer(meas):
    print(val)

for val in brics:
    print(val)

brics.index = ["BR","RU","IN","CH","SA"]
for label, row in brics.iterrows():
    print(label)
    print(row)

for label, row in brics.iterrows():
    brics.loc[label,"name_length"] = len(row['country'])

brics

brics['name_length_2']= brics['country'].apply(len)
brics

def dice():
    return(np.random.randint(0,8))


d=dice()
d

tiradas = []
for i in range(10):
    d1=dice()
    tiradas.append(d1)
    print(d1)

tiradas

import matplotlib.pyplot as plt
plt.hist(tiradas,bins=6)