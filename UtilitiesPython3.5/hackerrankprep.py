# -*- coding: utf-8 -*-
"""hackerrankprep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CtY1yz5ByRcmH281f-GYRN1OZ2dc9ddc
"""

#define a list
number = [3, 2, 8, 5, 10, 6]
largest_number = max(number);

print("The largest number is:", largest_number)

q=[1, 2, 5, 3, 7, 8, 6, 4]
pos=0
bribe=0
caotic=False
for i in q:
    if(i==pos+2):
        bribe+=1
    elif(i==pos+3):
        bribe+=2
    elif(i>pos+3):
        caotic=True
    pos+=1
if(caotic):
    print("too caotic")
else:
    print(bribe)

p =[p-1 for p in q]
p

s = "aba"
n = 10
tam = len(s)
times = n // tam
resto = n % tam
sresult = s*times+s[0:resto]
sresult.count('a')

# m.count("a")
#
# resto = 10-times*len(m)
# resto
# m[0:resto]
# sresult = m.count('a')*times+(m[0:resto].count('a'))
# sresult

a=list(map(int,"-1 -1 0 -9 -2 -2".rstrip().split()))
b=list(map(int,"-2 -1 -6 -8 -2 -5".rstrip().split()))
c=list(map(int,"-1 -1 -1 -2 -3 -4".rstrip().split()))
d=list(map(int,"-1 -9 -2 -4 -4 -5".rstrip().split()))
e=list(map(int,"-7 -3 -3 -2 -9 -9".rstrip().split()))
f=list(map(int,"-1 -3 -1 -2 -4 -5".rstrip().split()))
arr=[a,b,c,d,e,f]
type(arr[0][0])

a=list(map(int,"1 2 3 4 5 6".rstrip().split()))
a

tope=4%len(a)
for i in range(4,len(a)):
    print(a[i])
for i in range(0,tope):
    print(a[i])

hourglass = []
max=0
for i in range(0,4):
    hf = []
    for j in range(0,4):
        sum=arr[i][j]+arr[i][j+1]+arr[i][j+2]+arr[i+1][j+1]+arr[i+2][j]+arr[i+2][j+1]+arr[i+2][j+2]
        hf.append(sum)
        if((i==0 and j==0)  or sum>max):
            max=sum
    print(hf)
    hourglass.append(hf)
hourglass
max

arr1 = [2, 4]
arr2 = [16, 32, 96]
arr1=[3, 4]
arr2=[24,48]
topefactors = min(arr2)
topefactors
dict_factors = dict()
dict_set = dict()
for i in arr2:
    for j in range(1,topefactors+1):
        if(i%j==0):
            dict_factors[j]= dict_factors.get(j,0)+1
            if i in dict_set:
                dict_set[i].add(j)
            else:
                dict_set[i] = set([j])

dict_factors
# dict_set
possible = {k for k, v in dict_factors.items() if v==len(arr2)}
possible

dict_set

count = 0
totmatch=len(arr1)
for i in possible:
    qfac=0
    for j in arr1:
        if(i%j==0):
            qfac+=1
    if(qfac==totmatch):
        count+=1
count

dict_set

a = set([3])

a

dict_final = dict()
for i in possible:
    for j in arr1:
        if(j%i==0):
            dict_final[i]= dict_final.get(i,0)+1

dict_final

# x1=43
# v1=2
# x2=70
# v2=2
# num = x2 - x1
# den = v1 - v2
# x = num/den

# x.is_integer()
#
# a=78.23
# round(a)

(73 // 5 + 1) * 5

min = [(1,1), (2,2), (3,2), (1,1), (1,1), (2,1), (3,2)]

def redefine_dict(d, kdel):
    keys_to_keep = set(d.keys()) - set(kdel)
    s = {k: d[k] for k in keys_to_keep}
    return(s)

s = dict()
f = dict()
r = list()
for op, val in min:
    if(op==1):
        s[val] = s.get(val,0)+1
    elif(op==2):
        if val in s:
            s[val]-=1
            if(s[val]==0):
                s = redefine_dict(s,val)
    else:
        dcond={v: k for k, v in s.items() if v==val}
        r.append(1 if len(dcond)>0 else 0)
print(r)

s



import math
number = 81
base = 3
exponent = math.log(number, base)
exponent

import math
def getexpo(number,base):
    exponent = math.log(number, base)
    return(round(exponent,2))
def fintip(i):
    ret = i - 1
    if(ret<0):
        ret=0
    return(ret)
def countt(d):
    max=0
    for k,v in d.items():
        if(len(v)>max):
            max=len(v)
        if(len(v)==0):
            return(0)
    return(max)
def countTriplets(arr, r):
    dtrip = dict()
    pos =0
    for i in arr:
        expo = getexpo(i,r)
        if(expo.is_integer()):  # posible miembro de triplet
            expoi = int(expo)
            print(expoi)
            #inicializo triplets de i
            if(expoi in dtrip):
                dtrip[expoi][expoi].append(pos)
            else:
                dpositions = dict()
                dpositions[expoi] = list([pos])
                #inic posibles triplets
                for j in [1,2]:
                    dpositions[expoi+j] = list()
                    dtrip[expoi] = dpositions
            #actualizo triplets en que puede ser parte
            for j in range(expoi-1, fintip(expoi-1)-1,-1):
                #print("to update pos "+str(j))
                dtoact = dtrip[j]
                # print(dtoact)
                # print(dtoact[expoi])
                dtoact[expoi].append(pos)
                # print("despues")
                # print(dtoact[expoi])
                dtrip[j] = dtoact
        else:
            print("no es entero")
            print
            print(expo)
        pos+=1
        print("finishing - go to")
        print(pos)
        print(dtrip)
        tot=0
        for e in dtrip.values():
            tot+=countt(e)
    return(dtrip,tot)

def countTriplets2(arr, r):
    dt = dict()
    dtkey = dict()
    count=0
    for i in reversed(arr):
        next_r=i*r
        next_next_r=next_r*r
        #is the first
        count+=dt.get((next_r,next_next_r),0)
        #is the second
        dt[(i,next_r)]= dt.get((i,next_r),0) + dtkey.get(next_r,0)
        #is the third
        dtkey[i]= dtkey.get(i,0)+1
    return(dt,dtkey,count)

arr = [1, 3, 9, 9, 27, 81]
arr = [1, 5, 5, 25, 125]
dt,dtkey,count = countTriplets2(arr, 5)
print(dt)
print(dtkey)
print(count)

for i in reversed(arr):
    print(i*5)

arr = "1 5 5 25 125".split()
print(arr)

def countt(d):
    max=0
    for k,v in d.items():
        if(len(v)>max):
            max=len(v)
        if(len(v)==0):
            return(0)
    return(max)

# tot=0
# for e in dt.values():
#     tot+=countt(e)
# tot

l1 = list([4])
l1.append(3)
l1

inicio = 4
def fintip(i):
    ret = i - 1
    if(ret<0):
        ret=0
    return(ret)


for i in range(inicio-1, fintip(inicio-1)-1,-1):
    print(i)

ini = 1
for j in [1,2]:
    print(ini+j)

note = "ive got some coconuts"
na = note.rstrip().split()


# na.contains("got")

# def checkMagazine(magazine, note):
#     found=True
#     foreach i in note:
#         if(i not in magazine):
#             found=False
#
# return(found)

maga = "ive got a lovely bunch of coconuts"
note = "ive got some coconuts"
na = note.rstrip().split()
ma = maga.rstrip().split()
#checkMaga

#go trough a a list
for i in ('a', 'r', 'j'):
    print(i)

#define a list and multiply by 3
l1 = list(('a','t','j'))
l1*3

#string as a list (iterator of chars)
a = 'marcela'
l2 = list(a)
l2

for i in a:
    print(i)

#sort a list and obtain a new list
l3=sorted(l2)
l3

#apliung fuctions to a
a = [3,1,2,3]

# x=max(a)
# print(a.count(x))

#using funcion enumerate that return a tuple
#string as a list (iterator of chars)
a = 'marcela'
l2 = list(a)
l3 = enumerate(l2)
print(l3)
for i in l3:
    print(i[0])
    print(i[1])

#count the elements
def gencount(l2):
    for i in set(l2):
        print(l2.count(i))

set(l2)

#function that return a dictionary with a element and the cant of repetitions that have
def genmap(l):
    count_elem = []
    elem = set(l)
    for i in elem:
        count_elem.append(l.count(i))
    m1 = dict(zip(le,lc))
    # return(elem,count_elem)
    return(m1)


# le,lc=genmap(l2)

#function that return a dictionary with a element and the cant of repetitions that have
#creating a dictionary and checking if the key is or not
def genmap_e2(l):
    d1 = dict()
    e1 = enumerate(l)
    for k,v in e1:
        #k:cant v:elem
        if v in d1:
            d1[v]+=1
        else:
            d1[v]=1
    return(d1)

#creating a dictionary and checking if the key is or not in dict
def genmap_e3(l):
    d1 = dict()
    for i in l:
        if i.lower() in d1:
            d1[i.lower()]+=1
        else:
            d1[i.lower()]=1
    return(d1)

de3=genmap_e3("marcela castro leon")

de3

dcond={v: k for k, v in de3.items() if v==3}
dcond

keys='m'
set(keys)

keys_to_keep = set(de3.keys()) - set(keys)
new_dict = {k: de3[k] for k in keys_to_keep}

new_dict

de3.get('x',0)+1

#convert a dict to list
people = {'123456':{'first': 'Bob', 'last':'Smith'},
          '2345343': {'first': 'Jim', 'last': 'Smith'}}

for k in people.keys():
    print(k)

ids = list(people.keys())

for i in people.values():
    print(i['first'])
    print(i['last'])

#generate a list in comprehension
first = {v['first'] for v in people.values()}
names = {v['last'] for v in people.values()}
print(first)
print(names)

for i in first:
    print(i)

#generate a dict  in comprehension
dictcomp={x: x ** 2 for x in range(10)}
print(dictcomp)

dcond= {k: v for k, v in dictcomp.items() if v>25 }
print(len(dcond))

#get the unique values of an array
s1 = set()
s1.add('m')
print(s1)
s1.add(('a',2))
print(s1)

#testing gendictionary
dmarce=genmap_e3(list("marcela Castro Leon"))
dmarce

#to get a list of the keys
list(dmarce)

# #go in 4 to 4 and set a range
# for i in range(0,len(lmarce),4):
#     print(str(i)+" "+lmarce[i])

#using rpartition (right partition, found the first 'a' from right)
a="marcela castro"
a.rpartition("a")

#copu a list in another
lmarce =list("marcela castro")
lmarcec= lmarce.copy()
print(lmarcec)

#contactenete
lmarce+=list("la mejor")
print(lmarce)

lmarce.remove('a')
print(lmarce)

#tuples
a = list([(1,2,3),(4,5,6)])

a[1][2]

lmarce =list("marcela castro")
lmarce[0:4] = ['b', 'e']
print(lmarce)

lmarce[0:4:3]

# print(lc)

# # m1 = dict(zip(le,lc))
# print(m1)
#
# m1['m']=3
#
# k=list(m1)
# k

m1=genmap_e3(list("marcela Castro Leon"))
print(m1.keys())

#comprention to generate a list of tupleas from dictionary
mm = [(v, k) for (k, v) in m1.items()]
print(mm)

mm[0][1]

#recorrer la lista de tuplas
for k,v in mm:
    print(str(k)+" "+v)

m1['a']

#recorrer el diccionario
for k,v in m1.items():
    print(k)
    print(v)

e1=list(enumerate(l2))

for k, v in e1:
    print(k)
    print(v)

# def gen
#
# m1.values()

#conversion the string to time
from datetime import datetime
m2='12:01:00PM'
in_time = datetime.strptime(m2,"%I:%M:%S%p")
out_time = datetime.strftime(in_time, "%H:%M:%S%p")
print(out_time)

bc=3
wc=5
z=1

a = [10, 20, 30, 20, 40, 10, 50]

b = set(a)

a.count(10) // 2

pairs = 0
for i in set(a):
    pairs+=a.count(i) // 2

pairs

ar = ['D','D','U','U','D','D','U','D','U','U','U','D']
level = 0
valey=0
for i in ar:
    if i=='D':
        level-=1
    else:
        level+=1
    if i == 'U' and level==0:
        valey+=1

valey

ar = ['0', '0','1','0','0','1','0']
i=0
steps=0
while i< len(ar)-1:
    print(i)
    print(steps)
    if i+2< len(ar) and ar[i+2]=='0':
        i+=1
    i+=1
    steps+=1

steps

def jumpingOnClouds(c):
    i=0
    steps=0
    while i<(len(c)-1):
        if (i+2)<len(c) and c[i+2]=='0':
            i+=1
        i+=1
        steps+=1
        print(i)
        print(steps)
    return(steps)

jumpingOnClouds(ar)

for i in range(len(ar)):
    print(ar[i])